<script type ="text/javascript">

    var images = ['http://pshabalin.files.wordpress.com/2013/01/yellowstone-77.png', 'http://pshabalin.files.wordpress.com/2013/01/yellowstone-58.png', 'http://pshabalin.files.wordpress.com/2013/01/img_1082.png', 'http://pshabalin.files.wordpress.com/2013/01/dscn2295.png'];

    var ImageRotator = function (options) {
        this.width = options.width + 'px';
        this.height = options.height + 'px';
        this.imageUrls = options.images;
        this.interval = options.interval;
        this.transition = options.transition;
        this.loading = ko.observable(true);
        this.imageViewModels = [];
        options.images.forEach(function (image) {
            var imageViewModel = { url: image, active: ko.observable(false) };
            this.imageViewModels.push(imageViewModel);
        }.bind(this));
        this.imageViewModels[0].active(true);
        this.images = ko.observableArray();
        this.jsInt = setInterval(this.nextImage.bind(this), this.interval);
        this.loadFirstImage();
    };


    ImageRotator.prototype.nextImage = function () {
        this.images.valueWillMutate();
        var top = this.images.pop();
        var ind = this.imageViewModels.indexOf(top);
        var nextInd = (ind + 2) % this.imageViewModels.length;
        var next = this.imageViewModels[nextInd];
        this.images.unshift(next);
        top.active(false);
        this.images()[1].active(true);
        this.images.valueHasMutated();
    };

    ImageRotator.prototype.onCtrlClick = function (imageVM) {
        if (imageVM == this.images()[1]) {
            return;
        }
        clearInterval(this.jsInt);
        var top = this.images.pop();
        this.images()[0] = imageVM;
        var ind = this.imageViewModels.indexOf(imageVM);
        var nextInd = (ind + 1) % this.imageViewModels.length;
        var next = this.imageViewModels[nextInd];
        this.images.unshift(next);
        top.active(false);
        imageVM.active(true);
        this.images.valueHasMutated();
        this.jsInt = setInterval(this.nextImage.bind(this), this.interval);
    };

    ImageRotator.prototype.removeDecorator = function (elem) {
        var removeElement = function () { elem.parentNode.removeChild(elem) };
        elem.addEventListener('webkitTransitionEnd', removeElement);
        elem.addEventListener('TransitionEnd', removeElement);
        elem.style.left = this.width;
        elem.style['-webkit-transition'] = elem.style['transition'] = this.transition;
    };

    ImageRotator.prototype.loadFirstImage = function () {
        var first = this.imageUrls.shift();
        var imageEl = document.createElement('img');
        imageEl.addEventListener('load', function (e) {
            this.images.push(this.imageViewModels[0]);
            this.images.unshift(this.imageViewModels[1]);
            this.loading(false);
            this.imageUrls.shift();
            this.loadOtherImages();
        }.bind(this));
        imageEl.src = first;
    };

    ImageRotator.prototype.loadOtherImages = function () {
        this.imageUrls.forEach(function (image) {
            var imageEl = document.createElement('img');
            imageEl.addEventListener('load', function (e) {            //nothing yet
            }.bind(this));
            imageEl.src = image;
        }.bind(this));
    };

    var rotator = new ImageRotator({
        images: images,
        width: 640,
        height: 426,
        transition: '0.4s linear',
        interval: 5000
    });
    ko.applyBindings(rotator, document.body);





</script>




@model IEnumerable<Flat.Models.Mieszkanie>

@{
    ViewBag.Title = "FatFlat";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section featured {
    <section class="featured">
    <script type = "text/javascript" src ="/Scripts/rotator.js"></script>

 <!--       <div class="entry">
            <div class="title">
                <h1>@ViewBag.Title,</h1>
                <br>
                <h2>@ViewBag.Message</h2>
            </div>
            <p>
                Informacje od twórców:

            </p>
        </div>
     -->



 <div class="title"> 
     <h2>Ostatnio dodane</h2>
 </div>
 <div class="entry">
     
     <div class="rotator">
    <div class="ctr" data-bind="style:{width:width, height:height}">
        <div class="images" data-bind="
                template: {name:'imageTpl',
                           foreach:images,
                           beforeRemove : function(elem)   {this.removeDecorator(elem)}.bind($data)}"></div>
        <!-- ko if: loading -->
        <div class="loading">
            <img src="http://pshabalin.files.wordpress.com/2013/01/loading.gif"/>
        </div>
        <!-- /ko -->
    </div>
    <div class="controls" data-bind="template: { name: 'controlTpl', foreach: imageViewModels}"></div>
</div>
</body>

<script id="imageTpl" type="text/html"><img data-bind="attr : {src : url}"/></script>
<script id="controlTpl" type="text/html">
    <span data-bind="css : {active : active()}, click : $parent.onCtrlClick.bind($parent)"></span>
</script>


        <div class="title">
            <h2>Lista mieszkań</h2>
        </div>


<table>
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.IDmieszkanie)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Miejscowosc)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Ulica)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.NrBudynku)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.NrMieszkania)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.DataDodania)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Opis)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Ocena)
        </th>
        <th></th>
    </tr>

@foreach (var item in Model) {
    <tr>
        <td>
            @Html.DisplayFor(modelItem => item.IDmieszkanie)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Miejscowosc)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Ulica)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.NrBudynku)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.NrMieszkania)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.DataDodania)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Opis)
        </td>
        <td>
            @Html.DisplayFor(modelItem => item.Ocena)
        </td>
        <td>
            @Html.ActionLink("Edycja", "Edit/"+item.IDmieszkanie, "Mieszkanie") |
            @Html.ActionLink("Szczegóły", "Details/"+item.IDmieszkanie, "Mieszkanie" ) |
            @Html.ActionLink("Usuń", "Delete"+item.IDmieszkanie, "Mieszkanie")
        </td>
    </tr>
    <p>
     
            
</p>
}
    @Html.ActionLink("Dodaj", "Create",  "Mieszkanie")  

</table>
             </div>
<br>
     </section>
}          
 <!--            <footer>    
                To learn more about ASP.NET MVC visit
                <a href="http://asp.net/mvc" title="ASP.NET MVC Website">http://asp.net/mvc</a>.
                The page features <mark>videos, tutorials, and samples</mark> to help you get the most from ASP.NET MVC.
                If you have any questions about ASP.NET MVC visit
                <a href="http://forums.asp.net/1146.aspx/1?MVC" title="ASP.NET MVC Forum">our forums</a>.
                </footer>
     -->
            
               
